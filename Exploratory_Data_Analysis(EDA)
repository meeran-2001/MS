{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"eGBUgpe9Cxhe","colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"status":"ok","timestamp":1737953818048,"user_tz":-330,"elapsed":3763,"user":{"displayName":"Prapti Kharade","userId":"00318743752621273205"}},"outputId":"cc0f011e-2f5f-45fe-94c2-c39641113186"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                              intents\n","0   {'tag': 'greeting', 'patterns': ['Hi', 'Hey', ...\n","1   {'tag': 'morning', 'patterns': ['Good morning'...\n","2   {'tag': 'afternoon', 'patterns': ['Good aftern...\n","3   {'tag': 'evening', 'patterns': ['Good evening'...\n","4   {'tag': 'night', 'patterns': ['Good night', 'N...\n","..                                                ...\n","75  {'tag': 'fact-28', 'patterns': ['What do I do ...\n","76  {'tag': 'fact-29', 'patterns': ['How do I know...\n","77  {'tag': 'fact-30', 'patterns': ['How can I mai...\n","78  {'tag': 'fact-31', 'patterns': ['What's the di...\n","79  {'tag': 'fact-32', 'patterns': ['What's the di...\n","\n","[80 rows x 1 columns]"],"text/html":["\n","  <div id=\"df-6fe9e17f-31a6-4d74-a18f-8d925ca92a96\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>intents</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>{'tag': 'greeting', 'patterns': ['Hi', 'Hey', ...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>{'tag': 'morning', 'patterns': ['Good morning'...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>{'tag': 'afternoon', 'patterns': ['Good aftern...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>{'tag': 'evening', 'patterns': ['Good evening'...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>{'tag': 'night', 'patterns': ['Good night', 'N...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>75</th>\n","      <td>{'tag': 'fact-28', 'patterns': ['What do I do ...</td>\n","    </tr>\n","    <tr>\n","      <th>76</th>\n","      <td>{'tag': 'fact-29', 'patterns': ['How do I know...</td>\n","    </tr>\n","    <tr>\n","      <th>77</th>\n","      <td>{'tag': 'fact-30', 'patterns': ['How can I mai...</td>\n","    </tr>\n","    <tr>\n","      <th>78</th>\n","      <td>{'tag': 'fact-31', 'patterns': ['What's the di...</td>\n","    </tr>\n","    <tr>\n","      <th>79</th>\n","      <td>{'tag': 'fact-32', 'patterns': ['What's the di...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>80 rows Ã— 1 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6fe9e17f-31a6-4d74-a18f-8d925ca92a96')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6fe9e17f-31a6-4d74-a18f-8d925ca92a96 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6fe9e17f-31a6-4d74-a18f-8d925ca92a96');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-829c1ed1-5d52-4494-88fd-b58615423a89\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-829c1ed1-5d52-4494-88fd-b58615423a89')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-829c1ed1-5d52-4494-88fd-b58615423a89 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_9cf97062-b9be-4c30-9bb3-1a56f93065e1\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_9cf97062-b9be-4c30-9bb3-1a56f93065e1 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 80,\n  \"fields\": [\n    {\n      \"column\": \"intents\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":8}],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib as mp\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","data = pd.read_json('/content/MentalHealthChatbotDataset.json')\n","data"]},{"cell_type":"code","source":["#dislaying information\n","data.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9i0JotXnG70r","executionInfo":{"status":"ok","timestamp":1737953632921,"user_tz":-330,"elapsed":610,"user":{"displayName":"Prapti Kharade","userId":"00318743752621273205"}},"outputId":"d70c7528-73d0-4603-e829-aa5c3864145b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 80 entries, 0 to 79\n","Data columns (total 1 columns):\n"," #   Column   Non-Null Count  Dtype \n","---  ------   --------------  ----- \n"," 0   intents  80 non-null     object\n","dtypes: object(1)\n","memory usage: 772.0+ bytes\n"]}]},{"cell_type":"code","source":["# Displaingy the first few rows\n","print(data.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FbGC6dXHHG48","executionInfo":{"status":"ok","timestamp":1737953694850,"user_tz":-330,"elapsed":376,"user":{"displayName":"Prapti Kharade","userId":"00318743752621273205"}},"outputId":"dda7b091-a893-43b2-c1f8-62ef32111d98"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                                             intents\n","0  {'tag': 'greeting', 'patterns': ['Hi', 'Hey', ...\n","1  {'tag': 'morning', 'patterns': ['Good morning'...\n","2  {'tag': 'afternoon', 'patterns': ['Good aftern...\n","3  {'tag': 'evening', 'patterns': ['Good evening'...\n","4  {'tag': 'night', 'patterns': ['Good night', 'N...\n"]}]},{"cell_type":"code","source":["#shape of dataset\n","print(data.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0EwS_lU_JZRv","executionInfo":{"status":"ok","timestamp":1737954290104,"user_tz":-330,"elapsed":6,"user":{"displayName":"Prapti Kharade","userId":"00318743752621273205"}},"outputId":"ef77d8f5-fae1-4657-b30e-b03ecaac89ae"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(80, 1)\n"]}]},{"cell_type":"code","source":["#checking missing values\n","print(data.isnull().sum())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0YV0fB8QHVEp","executionInfo":{"status":"ok","timestamp":1737953754250,"user_tz":-330,"elapsed":353,"user":{"displayName":"Prapti Kharade","userId":"00318743752621273205"}},"outputId":"22a5b644-00b5-42cc-de7e-d8aee86b9656"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["intents    0\n","dtype: int64\n"]}]},{"cell_type":"code","source":["#descriptive data\n","print(data.describe())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GpONY1t8HgA1","executionInfo":{"status":"ok","timestamp":1737953783905,"user_tz":-330,"elapsed":424,"user":{"displayName":"Prapti Kharade","userId":"00318743752621273205"}},"outputId":"1dd4581f-0a2e-4fcf-98e1-168c8a9c07f7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                                                  intents\n","count                                                  80\n","unique                                                 80\n","top     {'tag': 'greeting', 'patterns': ['Hi', 'Hey', ...\n","freq                                                    1\n"]}]},{"cell_type":"code","source":["#Identifying Non-Numeric Columns:\n","print(data.dtypes)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RP44uP5lH0iN","executionInfo":{"status":"ok","timestamp":1737953986040,"user_tz":-330,"elapsed":371,"user":{"displayName":"Prapti Kharade","userId":"00318743752621273205"}},"outputId":"fbc828c9-121c-4046-d4ad-f72476d7d707"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["intents    object\n","dtype: object\n"]}]},{"cell_type":"code","source":["#Excluding Non-Numeric Columns\n","numeric_data = data.select_dtypes(include=['float64', 'int64'])\n","print(numeric_data.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ddVAcUuFIVAf","executionInfo":{"status":"ok","timestamp":1737954012927,"user_tz":-330,"elapsed":363,"user":{"displayName":"Prapti Kharade","userId":"00318743752621273205"}},"outputId":"c1bf44f1-f2b2-4316-de44-9883b3c66c21"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Empty DataFrame\n","Columns: []\n","Index: [0, 1, 2, 3, 4]\n"]}]},{"cell_type":"code","source":["#Word and character count\n","data['word_count'] = data['intents'].apply(lambda x: len(str(x).split()))\n","data['char_count'] = data['intents'].apply(lambda x: len(str(x)))\n","print(data[['word_count', 'char_count']].describe())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gZO7iQlMJnQZ","executionInfo":{"status":"ok","timestamp":1737954385709,"user_tz":-330,"elapsed":373,"user":{"displayName":"Prapti Kharade","userId":"00318743752621273205"}},"outputId":"2010e222-3875-490c-bf6b-442fee938385"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["         word_count    char_count\n","count     80.000000     80.000000\n","mean    1517.200000   9182.437500\n","std     2491.964003  14945.807846\n","min       29.000000    222.000000\n","25%      110.750000    759.750000\n","50%      302.000000   1953.500000\n","75%     1573.750000   9402.500000\n","max    11529.000000  75520.000000\n"]}]},{"cell_type":"code","source":["#Visualizing text length distribution\n","sns.histplot(data['word_count'], kde=True, bins=30)\n","plt.title(\"Word Count Distribution\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"TQIh1wCTJ24O","executionInfo":{"status":"ok","timestamp":1737954451310,"user_tz":-330,"elapsed":1944,"user":{"displayName":"Prapti Kharade","userId":"00318743752621273205"}},"outputId":"b12f5ae2-b22b-4ad0-e92e-ac3278870ed7"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["#Handling Nested JSON Data\n","import json\n","\n","# Expand a column with JSON objects\n","if 'json_column' in data.columns:\n","    json_expanded = pd.json_normalize(data['json_column'])\n","    data = pd.concat([data, json_expanded], axis=1).drop(columns=['json_column'])\n","\n","# Compute correlation matrix\n","if not numeric_data.empty:\n","    correlation_matrix = numeric_data.corr()\n","    print(\"Correlation Matrix:\")\n","    print(correlation_matrix)\n","\n","    # Plot the heatmap\n","    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')\n","    plt.title(\"Correlation Heatmap\")\n","    plt.show()\n","else:\n","    print(\"No numeric data available for correlation heatmap.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Lp6yRW6EIaF8","executionInfo":{"status":"ok","timestamp":1737954178082,"user_tz":-330,"elapsed":398,"user":{"displayName":"Prapti Kharade","userId":"00318743752621273205"}},"outputId":"61bea066-61a7-4cec-8815-8d65323e3516"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["No numeric data available for correlation heatmap.\n"]}]}]}